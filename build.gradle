buildscript {
  repositories {
      jcenter()
      maven { url "http://repo.spring.io/snapshot" }
      maven { url "http://repo.spring.io/milestone" }
  }
  dependencies {
      classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.1.BUILD-SNAPSHOT")
      classpath("com.netflix.nebula:gradle-ospackage-plugin:2.0.1")
  }
}
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'

jar {
  version =  '0.0.1-SNAPSHOT'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

repositories {
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repository.gbif.org/content/groups/gbif" }
    maven { url "http://repository.gbif.org/content/repositories/thirdparty/" }
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter-web")
  compile("org.springframework.boot:spring-boot-starter-data-jpa")
  //compile("org.springframework.boot:spring-boot-starter-data-solr")
  compile("org.springframework.boot:spring-boot-starter-security")
  compile("org.springframework.boot:spring-boot-starter-batch")
  compile("org.springframework.boot:spring-boot-starter-integration")
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("org.springframework.boot:spring-boot-starter-thymeleaf")
  compile("com.h2database:h2")
  compile("mysql:mysql-connector-java")
  compile("org.liquibase:liquibase-core:3.3.1")
  compile("org.ff4j:ff4j-core:1.3.1")
  compile("org.ff4j:ff4j-web:1.3.1")
  compile("org.ff4j:ff4j-aop:1.3.1")
  compile("org.ff4j:ff4j-jmx:1.3.1")
  compile("org.hibernate:hibernate-envers")
  compile("joda-time:joda-time")
  compile("ch.qos.logback:logback-core")
  compile("ch.qos.logback:logback-classic")
  compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity3")
  compile("org.webjars:bootstrap:2.2.2")
  compile("org.springframework.integration:spring-integration-jms")
  compile("org.apache.commons:commons-lang3:3.3.2")
  compile("org.apache.activemq:activemq-broker")
  compile("org.apache.activemq:activemq-pool")
  compile("org.gbif:dwca-reader:1.12")
  compile("org.gbif:dwc-api:1.1")
  compile("org.gbif:gbif-common:0.8")
  compile("org.gbif:ecat-common:1.6") {
    exclude group: "org.apache.lucene"
  }
  compile("com.vividsolutions:jts:1.11") {
    exclude group: "xerces"
  }
  testCompile("org.springframework.boot:spring-boot-starter-test")
  testCompile("org.easymock:easymock:3.3")
  testCompile("org.seleniumhq.selenium:selenium-java:2.43.1")
  testCompile("org.springframework:spring-test-htmlunit:1.0.0.M2")
  testCompile("info.cukes:cucumber-spring:1.1.6")
  testCompile("info.cukes:cucumber-junit:1.1.6")
  testCompile("org.ff4j:ff4j-test:1.3.1")
}

test {
  //makes the standard streams (err and out) visible at console when running tests
  //testLogging.showStandardStreams = true
}

apply plugin: 'os-package'

ospackage {
  release = '1'
  version = '0.0.1'
  os = LINUX
  packageName = 'cate'
  arch = I386
    
  from(jar.outputs.files) {
      rename '([a-z]+)-\\d+.\\d+.\\d+(-SNAPSHOT)?.jar','$1.jar'
      addParentDirs false
      user 'root'
      into '/var/lib'         
  }
  from('src/main/resources/cate') {
      addParentDirs false
      user 'root'
      fileMode 0755
      into '/etc/init.d'         
  }   
}

task 	buildrpm(type: Rpm, dependsOn: build) {
  requires('java', '1.5', GREATER | EQUAL)
  requires('ImageMagick')
}
