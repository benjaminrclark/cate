import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
  repositories {
      jcenter()
      maven { url "http://repo.spring.io/snapshot" }
      maven { url "http://repo.spring.io/milestone" }
      maven { url "http://maven.eveoh.nl/content/repositories/releases" }
      mavenCentral()
  }
  dependencies {
      classpath("org.redline-rpm:redline:1.2.2")
      classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE")
      classpath("com.netflix.nebula:gradle-ospackage-plugin:3.2.0")
      classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1")
      classpath("nl.eveoh:gradle-aspectj:1.6")
  }
}

def getReleaseTag = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()   
}

def getVersionName = { ->
    def tags = getReleaseTag() 
    if (tags.indexOf('-') < 0) {
        return tags
    } else {
        return tags.substring(0,tags.indexOf('-'))
    }
}

def getReleaseName = { ->
    def tags = getReleaseTag() 
    if (tags.indexOf('-') < 0) {
        return null 
    } else {
        return tags.substring(tags.indexOf('-') + 1, tags.length())
    }
}

project.ext {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    aspectjVersion = "1.8.4"
}

apply plugin: 'java'
apply plugin: 'aspectj'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'nebula.ospackage'

def releaseTag = getReleaseTag()
version = getVersionName()
def release = getReleaseName()

task updateDplCfg {
    def file = new File("dpl.cfg")
    def dpl = new JsonSlurper().parse(file)
    dpl.version.name = releaseTag
    dpl.version.vcs_tag = releaseTag
    dpl.version.released = new Date().format("yyyy-MM-dd")
    def jsonOutput = new JsonOutput()
    file.write( jsonOutput.prettyPrint( jsonOutput.toJson(dpl) ) )
}



jar {
  version =  release != '' ? version + '-' + release : version
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

compileAspect {
    additionalAjcArgs = ['source' : 1.7, 'target' : 1.7]
}

repositories {
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "http://repository.gbif.org/content/groups/gbif" }
    maven { url "http://repository.gbif.org/content/repositories/thirdparty/" }
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter-web")
  compile("org.springframework.boot:spring-boot-starter-data-jpa")
  compile("org.springframework.boot:spring-boot-starter-security")
  compile("org.springframework.boot:spring-boot-starter-batch")
  compile("org.springframework.boot:spring-boot-starter-integration")
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("org.springframework.boot:spring-boot-starter-thymeleaf")
  compile("org.springframework.boot:spring-boot-starter-redis")
  compile("com.h2database:h2")
  compile("mysql:mysql-connector-java")
  compile("org.liquibase:liquibase-core")
  compile("org.springframework:spring-jdbc")
  compile("org.springframework:spring-aspects")
  compile("org.springframework.data:spring-data-solr")
  compile("org.springframework.batch:spring-batch-integration")
  compile("org.ff4j:ff4j-core:1.3.1")
  compile("org.ff4j:ff4j-web:1.3.1")
  compile("org.ff4j:ff4j-aop:1.3.1")
  compile("org.ff4j:ff4j-jmx:1.3.1")
  compile("org.ff4j:ff4j-store-springjdbc:1.3.1")
  compile("org.hibernate:hibernate-envers")
  compile("joda-time:joda-time")
  compile("org.jadira.usertype:usertype.core:3.1.0.CR8")
  compile("ch.qos.logback:logback-core")
  compile("ch.qos.logback:logback-classic")
  compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4")
  compile("org.webjars:bootstrap:2.2.2")
  compile("org.springframework.integration:spring-integration-jms")
  compile("org.apache.commons:commons-lang3:3.3.2")
  compile("org.apache.activemq:activemq-broker")
  compile("org.apache.activemq:activemq-pool")
  compile("org.gbif:dwca-reader:1.12")
  compile("org.gbif:dwc-api:1.1")
  compile("org.gbif:gbif-common:0.8")
  compile("org.gbif:ecat-common:1.6") {
    exclude group: "org.apache.lucene"
  }
  compile("com.vividsolutions:jts:1.11") {
    exclude group: "xerces"
  }
  compile("org.springframework.cloud:spring-cloud-aws-context:1.0.3.RELEASE")
  compile("org.springframework.cloud:spring-cloud-aws-messaging:1.0.3.RELEASE")
  compile("org.springframework.session:spring-session")
  compile("net.bramp.ffmpeg:ffmpeg:0.2")
  compile("org.im4java:im4java:1.4.0")
  compile("org.apache.solr:solr-core:4.10.4") {
    exclude group: 'org.eclipse.jetty' 
    exclude group: 'org.eclipse.jetty.orbit' 
  }
  compile("org.apache.solr:solr-solrj:4.10.4")
  compile("org.apache.tika:tika-parsers:1.10")
  compile("org.apache.tika:tika-core:1.10")
  compile("org.apache.sanselan:sanselan:0.97-incubator")
  testCompile("org.springframework.boot:spring-boot-starter-test")
  testCompile("org.easymock:easymock:3.3")
  testCompile("org.seleniumhq.selenium:selenium-java:2.43.1")
  testCompile("info.cukes:cucumber-spring:1.1.6")
  testCompile("info.cukes:cucumber-junit:1.1.6")
  testCompile("org.ff4j:ff4j-test:1.3.1")
  testCompile("org.springframework.batch:spring-batch-test")
  aspectpath("org.springframework:spring-aspects") 
}

test {
  //makes the standard streams (err and out) visible at console when running tests
  // testLogging.showStandardStreams = true
   maxHeapSize = '1024m'
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

ospackage {
  release = release 
  version = version 
  os = LINUX
  packageName = 'cate'
  arch = NOARCH 
    
  from(jar.outputs.files) {
      rename '([a-z]+)-\\d+.\\d+.\\d+(-\\d+)?(-\\d+-\\w+)?.jar','$1.jar'
      addParentDirs true 
      user 'root'
      into '/var/lib/cate'         
  }
}

task buildrpm(type: Rpm, dependsOn: [build, updateDplCfg]) {
  requires('java', '1.5', GREATER | EQUAL)
  requires('ImageMagick')
  link('/etc/init.d/cate','/var/lib/cate/cate.jar')
}

springBoot {
    executable = true
}
